// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
 
generator client {
  provider = "prisma-client-js"
}
 
model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  exercises     Exercise[]
  bodyweights   Body_Weight[] 
  logs          Log[] 
  workouts      Workout[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
 
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  @@id([provider, providerAccountId])
}
 
model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
 
model VerificationToken {
  identifier String
  token      String
  expires    DateTime
 
  @@id([identifier, token])
}
 
model Body_Weight {
  id        String     @default(cuid()) @id
  weight    Float
  authorId  String 
  createdAt DateTime @default(now())

  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
}

model Exercise {
  id          String     @default(cuid()) @id
  name        String
  description String
  authorId    String
  createdAt   DateTime @default(now())

  logs Log[]
  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  workouts  ExercisesOnWorkouts[]
}


model Log {
  id          String     @default(cuid()) @id
  weight      Float
  reps        Int   
  oneRepMax   Int
  exerciseId  String 
  authorId    String
  createdAt   DateTime @default(now())

  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  exercise Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)
}


model Workout {
  id          String     @default(cuid()) @id 
  name        String
  description String
  authorId    String
  createdAt   DateTime @default(now())

  user User @relation(fields: [authorId], references: [id], onDelete: Cascade)
  exercises ExercisesOnWorkouts[]
}

model ExercisesOnWorkouts{
  @@id([exerciseId, workoutId])
  exercise    Exercise @relation(fields: [exerciseId], references: [id], onDelete: Cascade)    
  exerciseId  String
  workout    Workout @relation(fields: [workoutId], references: [id], onDelete: Cascade)    
  workoutId  String
}